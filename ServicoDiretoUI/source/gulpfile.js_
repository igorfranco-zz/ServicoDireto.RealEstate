
// define plug-ins
var 
  gulp            = require('gulp'),
  gutil           = require('gulp-util'),
  flatten         = require('gulp-flatten'),
  gulpFilter      = require('gulp-filter'),
  uglify          = require('gulp-uglify'),
  minifycss       = require('gulp-minify-css'),
  rename          = require('gulp-rename'),
  webserver       = require('gulp-webserver'),
  browserSync     = require('browser-sync').create(),
  mainBowerFiles  = require('main-bower-files');

var reload      = browserSync.reload;


//**------------------------------------------deploy--------------------------------------//
// Define paths variables
var dest_path =  'builds/deploy';
var jsFilter = gulpFilter('*.js', {restore: true}),
    cssFilter = gulpFilter('*.css', {restore: true}),
    fontFilter = gulpFilter(['*.eot', '*.woff', '*.svg', '*.ttf'], {restore: true});

var src = {
    css : 'builds/development/css/*.css',
    html: 'builds/development/*.html',
    js  : ['builds/development/js/**/*', 'builds/development/*.js'],
    modules : 'builds/development/modules/**/*'
};    

gulp.task('modules-deploy', function() {
  return gulp.src('builds/development/modules/**/*')
  .pipe(gulp.dest(dest_path + '/modules/'))
})

gulp.task('assets-deploy', function() {
  return gulp.src('builds/development/assets/**/*')
  .pipe(gulp.dest(dest_path + '/assets/'))
})

gulp.task('html-deploy', function() {
  return gulp.src('builds/development/*.html')
  .pipe(gulp.dest(dest_path + '/'))
});

// grab libraries files from bower_components, minify and push in /public
gulp.task('components-deploy', function() 
{
  return gulp.src(mainBowerFiles())
  // grab vendor js files from bower_components, minify and push in /public
  .pipe(jsFilter)
  .pipe(gulp.dest(dest_path + '/js/'))
  .pipe(uglify())
  .pipe(rename({
    suffix: ".min"
  }))
  .pipe(gulp.dest(dest_path + '/js/'))
  .pipe(jsFilter.restore)

  // grab vendor css files from bower_components, minify and push in /public
  .pipe(cssFilter)
  .pipe(gulp.dest(dest_path + '/css'))
  .pipe(minifycss())
  .pipe(rename({
      suffix: ".min"
  }))
  .pipe(gulp.dest(dest_path + '/css'))
  .pipe(cssFilter.restore)

  // grab vendor font files from bower_components and push in /public
  .pipe(fontFilter)
  .pipe(flatten())
  .pipe(gulp.dest(dest_path + '/fonts'));
});
gulp.task('deploy', ['html-deploy', 'assets-deploy', 'modules-deploy', 'components-deploy']);

//------------------------------------------development--------------------------------------//


// Watch files for changes
gulp.task('watch', ['browser-sync'], function() {
    // Watch HTML files
    gulp.watch(src.html, reload);    
    gulp.watch(src.js, reload);
    gulp.watch(src.css, reload);
    gulp.watch(src.modules, reload);
});

// Static server
gulp.task('browser-sync', function() {
    browserSync.init({
        port:8000,
        server: 
        {
            directory: false,
            baseDir: "./builds/development",
            routes: {
              "/bower_components": "./bower_components/"
            }
        }
    });
    //gulp.watch("*.html").on("change", browserSync.reload);
});

gulp.task('default', ['browser-sync', 'watch']); 